<%= content_for(:page_title) { "Live Map for nearby coffee places"} %>
<%= content_for(:page_description) { "See nearby coffee places on a live map!" } %>
<%= content_for :extra_styles do %>
  <link href="https://api.mapbox.com/mapbox-gl-js/v2.7.0/mapbox-gl.css" rel="stylesheet" />
<% end %>

<div class="pr-4 py-5 sm:py-6 sm:pr-6">
  <% Tag.all.order(:position).each do |tag| %>
    <%= link_to map_path(tags: tag.slug), data: { turbo: false } do %>
      <%= render partial: "shared/tags/#{tag.slug.underscore}", locals: { name: tag.name } %>
    <% end %>
  <% end %>

  <div class="mt-4">
    <a href="<%= map_path %>" class="px-3 py-1 inline-flex text-xs leading-5 rounded-full bg-gray-100 text-gray-800 border border-gray-800 font-semibold">
      RESET FILTERS
    </a>
  </div>
</div>

<div class="h-full">
  <div id="map" class="w-full h-full rounded-lg shadow-md"></div>
</div>

<%= content_for :js do %>
  <script src="https://api.mapbox.com/mapbox-gl-js/v2.7.0/mapbox-gl.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const mapContainer = document.getElementById('map');
      let map = null;
      let defaultCenter = null;

      // Fetch map data from the API
      fetch('/api/v1/maps')
        .then(response => response.json())
        .then(data => {
          defaultCenter = data.default_center;
          initializeMap(data.shops);
        })
        .catch(error => {
          console.error('Error fetching map data:', error);
          // Initialize map with default KLCC coordinates if API fails
          defaultCenter = { latitude: 3.1390, longitude: 101.6869 };
          initializeMap([]);
        });

      function initializeMap(shops) {
        map = new mapboxgl.Map({
          container: 'map',
          style: 'mapbox://styles/amreez/cl03wqg0e000014o0j1q8j0j8',
          center: [defaultCenter.longitude, defaultCenter.latitude],
          zoom: 13,
          attributionControl: false,
          accessToken: '<%= ENV["MAPBOX_ACCESS_TOKEN"] %>'
        });

        // Add navigation control
        map.addControl(
          new mapboxgl.NavigationControl({
            showCompass: false
          }),
          'top-right'
        );

        // Add attribution control
        map.addControl(
          new mapboxgl.AttributionControl({
            compact: true
          })
        );

        // Add geolocation control
        map.addControl(
          new mapboxgl.GeolocateControl({
            positionOptions: {
              enableHighAccuracy: true
            },
            trackUserLocation: true,
            showUserHeading: true
          }),
          'top-right'
        );

        // Add scale control
        map.addControl(
          new mapboxgl.ScaleControl({
            maxWidth: 100,
            unit: 'metric'
          }),
          'bottom-left'
        );

        // Add fullscreen control
        map.addControl(
          new mapboxgl.FullscreenControl(),
          'top-right'
        );

        map.on('load', () => {
          // Add shops to the map
          if (shops.length > 0) {
            map.addSource('shops', {
              type: 'geojson',
              data: {
                type: 'FeatureCollection',
                features: shops.map(shop => ({
                  type: 'Feature',
                  geometry: {
                    type: 'Point',
                    coordinates: [shop.longitude, shop.latitude]
                  },
                  properties: {
                    id: shop.id,
                    name: shop.name,
                    address: shop.address,
                    rating: shop.rating
                  }
                }))
              },
              cluster: true,
              clusterMaxZoom: 14,
              clusterRadius: 50
            });

            // Add shop clusters layer
            map.addLayer({
              id: 'clusters',
              type: 'circle',
              source: 'shops',
              filter: ['has', 'point_count'],
              paint: {
                'circle-color': [
                  'step',
                  ['get', 'point_count'],
                  '#51bbd6',
                  100,
                  '#f1f075',
                  750,
                  '#f28cb1'
                ],
                'circle-radius': [
                  'step',
                  ['get', 'point_count'],
                  20,
                  100,
                  30,
                  750,
                  40
                ]
              }
            });

            // Add cluster count layer
            map.addLayer({
              id: 'cluster-count',
              type: 'symbol',
              source: 'shops',
              filter: ['has', 'point_count'],
              layout: {
                'text-field': '{point_count_abbreviated}',
                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                'text-size': 12
              }
            });

            // Add unclustered point layer
            map.addLayer({
              id: 'unclustered-point',
              type: 'circle',
              source: 'shops',
              filter: ['!', ['has', 'point_count']],
              paint: {
                'circle-color': '#11b4da',
                'circle-radius': 8,
                'circle-stroke-width': 1,
                'circle-stroke-color': '#fff'
              }
            });

            // Add click handler for clusters
            map.on('click', 'clusters', (e) => {
              const features = map.queryRenderedFeatures(e.point, {
                layers: ['clusters']
              });
              const clusterId = features[0].properties.cluster_id;
              map.getSource('shops').getClusterExpansionZoom(
                clusterId,
                (err, zoom) => {
                  if (err) return;

                  map.easeTo({
                    center: features[0].geometry.coordinates,
                    zoom: zoom
                  });
                }
              );
            });

            // Add click handler for unclustered points
            map.on('click', 'unclustered-point', (e) => {
              const coordinates = e.features[0].geometry.coordinates.slice();
              const { name, address, rating } = e.features[0].properties;

              // Ensure that if the map is zoomed out such that multiple
              // copies of the feature are visible, the popup appears
              // over the copy being pointed to.
              while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
              }

              new mapboxgl.Popup()
                .setLngLat(coordinates)
                .setHTML(`
                  <h3 class="font-bold text-lg">${name}</h3>
                  <p class="text-gray-600">${address}</p>
                  <p class="text-yellow-500">â˜… ${rating}</p>
                `)
                .addTo(map);
            });

            // Change the cursor to a pointer when the mouse is over the clusters layer
            map.on('mouseenter', 'clusters', () => {
              map.getCanvas().style.cursor = 'pointer';
            });

            // Change it back to a pointer when it leaves
            map.on('mouseleave', 'clusters', () => {
              map.getCanvas().style.cursor = '';
            });

            // Change the cursor to a pointer when the mouse is over the unclustered point layer
            map.on('mouseenter', 'unclustered-point', () => {
              map.getCanvas().style.cursor = 'pointer';
            });

            // Change it back to a pointer when it leaves
            map.on('mouseleave', 'unclustered-point', () => {
              map.getCanvas().style.cursor = '';
            });
          }
        });
      }
    });
  </script>

<% end %>
